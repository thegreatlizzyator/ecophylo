The ``ecophylo`` module
======================

Using ``simulate``
-------------------
Author : Maxime Jaunatre <maxime.jaunatre@yahoo.fr>

This is an example text file in reStructuredText format.  First import
``simulate`` from the ``ecophylo`` module:

    >>> from ecophylo import simulate_dolly

Now use it:

testing sample_size
    >>> t = simulate_dolly(sample_size = "2", com_size = 1, mu = 1, 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: sample_size should all be ints
    >>> t = simulate_dolly(sample_size = ["2", 1], com_size = 1, mu = 1, 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: sample_size should all be ints
    >>> t = simulate_dolly(sample_size = -1, com_size = 1, mu = 1, 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: sample_size should all be positive
    >>> t = simulate_dolly(sample_size = [2, -1], com_size = 1, mu = 1, 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: sample_size should all be positive

# testing com_size
    >>> t = simulate_dolly(sample_size = 5, com_size = [10, 30], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: there should be as many elements in com_size as there are demes
    >>> t = simulate_dolly(sample_size = 5, com_size = [1], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: com_size must be superior to samples
    >>> t = simulate_dolly(sample_size = 5, com_size = -1, mu = 1, 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: community sizes should be strictly positive int
    >>> t = simulate_dolly(sample_size = 5, com_size = "many", mu = 1, 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: community sizes should be strictly positive int
    >>> t = simulate_dolly(sample_size = [5, 5], com_size = [10, -30], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [[0], [0]], mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: all past sizes should be strictly positive
    >>> t = simulate_dolly(sample_size = [5, 5], com_size = [[10], [30]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [[0, 20], [0]], mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: there should be as many past com_size as there are epochs in changetime
    >>> t = simulate_dolly(sample_size = [5, 5], com_size = [[10], [-30]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [[0], [0]], mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: all past sizes should be strictly positive

testing mu
    >>> t = simulate_dolly(sample_size = 2, com_size = [[500]], mu = -1, 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: mu must be a float between 0 and 1
    >>> t = simulate_dolly(sample_size = 2, com_size = [[500]], mu = 10, 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: mu must be a float between 0 and 1
    >>> t = simulate_dolly(sample_size = 2, com_size = [[500]], mu = "0.5", 
    ...  init_rates = None, 
    ...  changetime = None, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: mu must be a float between 0 and 1

testing init_rates
    >>> t = simulate_dolly(sample_size = 2, com_size = [[500]], mu = 1, 
    ...  init_rates = "make babies", 
    ...  changetime = [[0]], mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: init_rates must be float, list of float or nested list of float
    >>> t = simulate_dolly(sample_size = 2, com_size = [[500, 200]], mu = 1, 
    ...  init_rates = [1, 2], 
    ...  changetime = [[0, 20]], mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: there should be as many elements in init_rates as there are demes
    >>> t = simulate_dolly(sample_size = 2, com_size = [[500]], mu = 1, 
    ...  init_rates = [[1, 2]], 
    ...  changetime = [[0]], mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: there should be as many past growth init_rates as there are epochs in changetime


testing changetime
  single value
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = "KT", mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: changetime must be int, list of int or nested list of int
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = -66, mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: changetime must be positive values

  list of val
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [0, 0, 20] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: Duplicated times in changetime are not possible
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [0, "KT", 20] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: changetime must be int, list of int or nested list of int
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [0, -66, 20] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: changetime must be positive values
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [66, 0, 20] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: first element of changetime must be equal to 0

  nested list of int

    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [[0, 0, 20]] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: Duplicated times in changetime for a Deme are not possible
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [[0, "KT", 20]] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: changetime must be int, list of int or nested list of int
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [[0, -66, 20]] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: changetime must be positive values
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [[66, 0, 20]] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: first element of changetime for a Deme must be equal to 0

    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [[0, 20], [0, 20]] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: there should be as many past sizes as there are epochs in changetime
    
testing mrca

testing migr

testing migr_time

testing verbose
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [[0, 20]] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = "False", seed = None)
    Traceback (most recent call last):
      ...
    SystemExit: verbose must be a boolean

testing seed
    >>> t = simulate_dolly(sample_size = 2, com_size = [[20, 50]], mu = 1, 
    ...  init_rates = None, 
    ...  changetime = [[0, 20]] , mrca = None, 
    ...  migr = 1, migr_time = None, 
    ...  verbose = False, seed = "tournesol")
    Traceback (most recent call last):
      ...
    SystemExit: seed must be an integer